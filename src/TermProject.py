from __future__ import division
from pandas import Series, DataFrame
import pandas as pd
from numpy.random import randn
import numpy as np
np.set_printoptions(precision=4, suppress=True)
import matplotlib.pyplot as plt
plt.rc('figure', figsize=(12, 6))
import pandas.io.data as web
from matplotlib.pyplot import scatter,xlabel,ylabel,savefig
import statsmodels.api as sm
from datetime import datetime

aapl = web.get_data_google('AAPL', '2012-04-01')
aapl['Rows'] = (aapl.index - datetime.strptime('2012-04-01',date_format)).days
msft = web.get_data_google('MSFT', '2012-04-01')
msft['Rows'] = (msft.index - datetime.strptime('2012-04-01',date_format)).days

scatter(msft.index,msft.Close,marker='o',edgecolor='b',facecolor='none',alpha=0.5)
xlabel('Date')
ylabel('Price')
savefig('Microsoft.png',fmt='png',dpi = 100)

scatter(aapl.index,aapl.Close,marker='o',edgecolor='b',facecolor='none',alpha=0.5)
xlabel('Date')
ylabel('Price')
savefig('APPLE.png',fmt='png',dpi = 100)

date_format = "%Y-%m-%d"
yaapl = aapl.Close
Xaapl= aapl['Rows']
Xaapl = sm.add_constant(Xaapl)
estaapl = sm.OLS(yaapl, Xaapl).fit()
estaapl.summary()

plt.rc('figure', figsize=(12, 6))
Xaaplpred = Xaapl.copy()
#print Xaaplpred.xs(datetime.date(2016, 1, 26))
daterange = pd.date_range(datetime.datetime.now(), datetime.datetime.now() + datetime.timedelta(days=365))
for d in daterange:
    Xaaplpred.loc[d.date()]= [1,(d - datetime.datetime.strptime('2012-04-01',date_format)).days]
yaaplpred = estaapl.predict(Xaaplpred)
scatter(aapl.index,aapl.Close,marker='o',edgecolor='b',facecolor='none',alpha=0.5)
xlabel('Date')
ylabel('Price')
savefig('APPLE.png',fmt='png',dpi = 100)
plt.plot(Xaaplpred.index, yaaplpred, 'r', alpha=0.5)  # Add the regression line

ymsft = msft.Close
Xmsft= msft['Rows']
Xmsft = sm.add_constant(Xmsft)
estmsft = sm.OLS(ymsft, Xmsft).fit()
estaapl.summary()

Xmsftpred = Xmsft.copy()
#print Xmsftpred.xs(datetime.date(2016, 1, 26))
daterange = pd.date_range(datetime.datetime.now(), datetime.datetime.now() + datetime.timedelta(days=365))
for d in daterange:
    Xmsftpred.loc[d.date()]= [1,(d - datetime.datetime.strptime('2012-04-01',date_format)).days]
ymsftpred = estmsft.predict(Xmsftpred)
scatter(msft.index,msft.Close,marker='o',edgecolor='b',facecolor='none',alpha=0.5)
xlabel('Date')
ylabel('Price')
savefig('Microsoft.png',fmt='png',dpi = 100)
plt.plot(Xmsftpred.index, ymsftpred, 'r', alpha=0.5)  # Add the regression line

from pandas.tools.plotting import autocorrelation_plot
# Plot the auto-correlation graph for each stock using Pandas' autocorrelation_plot() function
plt.figure()
autocorrelation_plot(aapl)
plt.title('AAPL Autocorrelation')
plt.figure()
autocorrelation_plot(msft)
plt.title('MSFT Autocorrelation')
plt.figure()
plt.show()
# An alternative way of plotting correlation using matplotlib instead:
plt.title('AAPL Autocorrelation')
plt.acorr(aapl.Close, maxlags=len(aapl)-1)
# This plot will look different from the one generated by Pandas because:
#   (1) the correlation is calculated relative to 0 rather than to the average of the data
#   (2) the lag is shown from -1200 to 1200 rather than 0 to 1200
plt.title('MSFT Autocorrelation')
plt.acorr(msft.Close, maxlags=len(aapl)-1)
# All stocks are highly autocorrelated.  This is to be expected because yesterday's stock price
# gives you a lot of insight into today's: it's likely very close.  If they weren't autocorrelated
# that would mean that the prices jump all over the place from day to day: $5 one day, $47 the next,
# $0.02 the day after that.
# Resampling the data to get end of business month data points
aapl_monthend = aapl.Close.resample('BM').last()
msft_monthend = msft.Close.resample('BM').last()
Xaapl_monthend = Xaapl.resample('BM').last()
Xmsft_monthend = Xmsft.resample('BM').last()
# Check to make sure we got what we expected
#aapl_monthend
# calculating monthly returns for each stock
aapl_returns = aapl_monthend / aapl_monthend.shift(1) - 1
aapl_returns.name = 'AAPL'
aapl_returns.loc[datetime.date(2012,4,30)] = 0
scatter(aapl_returns.index,aapl_returns,marker='o',edgecolor='b',facecolor='none',alpha=0.5)
xlabel('Date')
ylabel('Return')
savefig('APPLE Return.png',fmt='png',dpi = 100)

#aapl_returns
msft_returns = msft_monthend / msft_monthend.shift(1) - 1
msft_returns.name = 'MSFT'
#msft_returns
msft_returns.loc[datetime.date(2012,4,30)] = 0
scatter(msft_returns.index,msft_returns,marker='o',edgecolor='b',facecolor='none',alpha=0.5)
xlabel('Date')
ylabel('Return')
savefig('Microsoft Return.png',fmt='png',dpi = 100)
# print aapl_returns
estaaplreturn = sm.OLS(aapl_returns , Xaapl_monthend).fit()
# Check the results
estaaplreturn.summary()
#estaapl.params
Xaaplpred_me = Xaapl_monthend.copy()
#print Xaaplpred.xs(datetime.date(2016, 1, 26))
daterange = pd.date_range(datetime.datetime.now(), datetime.datetime.now() + datetime.timedelta(days=365), freq='M')
for d in daterange:
    Xaaplpred_me.loc[d.date()]= [1,(d - datetime.datetime.strptime('2012-04-01',date_format)).days]
yaaplpred_me = estaaplreturn.predict(Xaaplpred_me)
scatter(aapl_returns.index,aapl_returns,marker='o',edgecolor='b',facecolor='none',alpha=0.5)
xlabel('Date')
ylabel('Return')
savefig('APPLE RETURN.png',fmt='png',dpi = 100)
plt.plot(Xaaplpred_me.index, yaaplpred_me, 'r', alpha=0.5)  # Add the regression line
# print aapl_returns
estmsftreturn = sm.OLS(msft_returns , Xmsft_monthend).fit()
# Check the results
estmsftreturn.summary()
#estaapl.params
Xmsftpred_me = Xmsft_monthend.copy()
#print Xaaplpred.xs(datetime.date(2016, 1, 26))
daterange = pd.date_range(datetime.datetime.now(), datetime.datetime.now() + datetime.timedelta(days=365), freq='M')
for d in daterange:
    Xmsftpred_me.loc[d.date()]= [1,(d - datetime.datetime.strptime('2012-04-01',date_format)).days]
ymsftpred_me = estmsftreturn.predict(Xmsftpred_me)
scatter(msft_returns.index,msft_returns,marker='o',edgecolor='b',facecolor='none',alpha=0.5)
xlabel('Date')
ylabel('Return')
savefig('MICROSOFT RETURN.png',fmt='png',dpi = 100)
plt.plot(Xmsftpred_me.index, ymsftpred_me, 'r', alpha=0.5)  # Add the regression line
# concatenating all 4 time series into a datafame for further analysis
df_to_analyse = pd.concat([aapl_returns, msft_returns], join='outer', axis = 1)
# dropping first row with NAs
df_to_analyse.dropna()
from pandas.tools.plotting import scatter_matrix

#Scatter plot matrix
scatter_matrix(df_to_analyse.dropna(), alpha=0.2, figsize=(10, 10), diagonal='kde')
# Any answer to this is right as long as the "why" makes sense.  Stocks with low or negative
# correlation but similar returns over the period would have made a good combination as they would
# provide equivalent return to one or the other but with less month-to-month variability and so, in
# a sense, less risk.  Note however that this doesn't really say anything about whether they will
# continue to be low- or anti-correlated in the future.
# Transpose the dataframe in preparation for plotting
df_to_analyse_t = df_to_analyse.T
df_to_analyse_t.dropna(axis=1,how='all')
corr_plt = df_to_analyse_t.dropna(axis=1,how='all').values
corr_plt
# Plot the correlation of the returns
from numpy import corrcoef, sum, log, arange
from pylab import pcolor, show, colorbar, xticks, yticks

R = corrcoef(corr_plt)
pcolor(R)
colorbar()
yticks(arange(0.5,2),['AAPL', 'MSFT'])
xticks(arange(0.5,2),['AAPL', 'MSFT'])
show()
